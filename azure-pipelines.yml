# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
- group: simmo-vars

jobs:
- job: Terraform_Validate
  displayName: 'Terraform Validate'

<<<<<<< HEAD
  - task: TerraformCLI@0
    displayName: 'Terraform init'
    inputs:
      command: 'init'
      backendServiceArm: $(backendServiceArm)
      backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
      backendAzureRmContainerName: '$(backendAzureRmContainerName)'
      backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
      backendAzureRmKey: '$(backendAzureRmKey)'
      backendAzureRmResourceGroupLocation: '$(backendAzureRmResourceGroupLocation)'
      backendType: 'azurerm'
      ensureBackend: true
      allowTelemetryCollection: true
=======
  steps:
    - task: TerraformInstaller@0
      displayName: 'Terraform Installer'
      inputs:
        terraformVersion: 'latest'
>>>>>>> 0c626c6f65681c7b6468a38ea671f1f79b1198fd

    - task: TerraformCLI@0
      displayName: 'Terraform init'
      inputs:
        command: 'init'
        backendServiceArm: $(backendServiceArm)
        backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
        backendAzureRmContainerName: '$(backendAzureRmContainerName)'
        backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
        backendAzureRmKey: '$(backendAzureRmKey)'
        backendAzureRmResourceGroupLocation: '$(backendAzureRmResourceGroupLocation)'
        backendType: 'azurerm'
        ensureBackend: true
        allowTelemetryCollection: true

    - task: TerraformCLI@0
      displayName: 'Terraform validate'
      inputs:
        command: 'validate'
        allowTelemetryCollection: true

    - task: TerraformCLI@0
      displayName: 'Terraform plan'
      inputs:
        command: 'plan'
        allowTelemetryCollection: true
        commandOptions: '-out planresults.tfplan'
        environmentServiceName: $(backendServiceArm)

    - task: TerraformCLI@0
      displayName: 'Terraform apply'
      inputs:
        command: 'apply'
        allowTelemetryCollection: true
        environmentServiceName: $(backendServiceArm)
        commandOptions: 'planresults.tfplan'

